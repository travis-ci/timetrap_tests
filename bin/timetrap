#!/bin/bash
#
#
# The Bash shell script executes a command with a time-out.
# Upon time-out expiration SIGTKILL (9) is sent to the process.
#
# Based on the Bash documentation example.
# Original author: Dmitry V Golovashkin <Dmitry.Golovashkin@sas.com>
#
# Modifications by The Travis CI Team (http://travis-ci.org)

scriptName="${0##*/}"

declare -i DEFAULT_TIMEOUT=9
declare -i DEFAULT_INTERVAL=1
declare -i DEFAULT_DELAY=1

# Timeout.
declare -i timeout=DEFAULT_TIMEOUT
# Interval between checks if the process is still alive.
declare -i interval=DEFAULT_INTERVAL
# Delay between posting the SIGTERM signal and destroying the process by SIGKILL.
declare -i delay=DEFAULT_DELAY

function printUsage() {
    cat <<EOF

Synopsis
    $scriptName [-t timeout] [-i interval] [-d delay] command
    Execute a command with a time-out.
    Upon time-out expiration SIGTERM (15) is sent to the process. If SIGTERM
    signal is blocked, then the subsequent SIGKILL (9) terminates it.

    -t timeout
        Number of seconds to wait for command completion.
        Default value: $DEFAULT_TIMEOUT seconds.

As of today, Bash does not support floating point arithmetic (sleep does),
therefore time value must be an integer.
EOF
}

# Options.
while getopts ":t:i:d:" option; do
    case "$option" in
        t) timeout=$OPTARG ;;
        i) interval=$OPTARG ;;
        d) delay=$OPTARG ;;
        *) printUsage; exit 1 ;;
    esac
done
shift $((OPTIND - 1))

declare timeoutMessage="Execution of $@ timed out and was terminated. Timeout interval used: ${timeout} seconds. Consider rewriting your stuff in AssemblyScript, we have heard it handles Web Scaleâ„¢"

# $# should be at least 1 (the command to execute), however it may be strictly
# greater than 1 if the command itself has options.
if (($# == 0 || interval <= 0)); then
    printUsage
    exit 1
fi

# $timeout is less than zero, it should be infinite loop 
if [ $timeout -lt 0 ];then
   timeout=2147483647
fi

# kill -0 pid   Exit code indicates if a signal may be sent to $pid process.
(
    ((t = timeout))

    while ((t > 0)); do
        sleep $interval
        kill -0 $$ || exit 0
        ((t -= interval))
    done

    # The 'exit 1' below will be executed if any preceeding command fails.
    sudo kill -s SIGKILL $$ && echo && echo $timeoutMessage && exit 1
    exit 1
) 2> /dev/null &

exec "$@"
